name: Build
on:
  push:
    paths:
      - '.github/workflows/build.yml'
      - 'dependencies.conf'
      - 'build-*.sh'
      - 'initramfs/*'
      - 'Dockerfile*'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: "x64"
            docker-arch: "amd64"
          - arch: "arm64"
            docker-arch: "arm64"
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - name: Build
        run: |
          source dependencies.conf
          curl -L -o kernel.tar.gz https://github.com/vmify/kernel/releases/download/$KERNEL_VERSION/kernel-minimal-${{ matrix.arch }}-$KERNEL_VERSION.tar.gz
          curl -L -o busybox.tar.gz https://github.com/vmify/busybox/releases/download/$BUSYBOX_VERSION/busybox-minimal-${{ matrix.arch }}-$BUSYBOX_VERSION.tar.gz
          docker buildx build --platform=linux/${{ matrix.docker-arch }} --build-arg ARCH=${{ matrix.arch }} --build-arg NANOOS_VERSION=$GITHUB_RUN_NUMBER --build-arg KERNEL_VERSION=$KERNEL_VERSION --build-arg BUSYBOX_VERSION=$BUSYBOX_VERSION --progress=plain --output type=local,dest=. .
          docker build --build-arg ARCH=${{ matrix.arch }} --build-arg NANOOS_VERSION=$GITHUB_RUN_NUMBER --build-arg KERNEL_VERSION=$KERNEL_VERSION --build-arg BUSYBOX_VERSION=$BUSYBOX_VERSION --progress=plain -t fat32-build -f Dockerfile-fat32 .
          docker run --privileged --name fat32-run fat32-build
          docker cp fat32-run:/nanoos.fat32.gz .
          docker container rm fat32-run
          docker image rm fat32-build
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.arch }}
          path: nanoos.fat32.gz
          retention-days: 1

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Tag
        id: tag
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          git tag $GITHUB_RUN_NUMBER
          git push origin $GITHUB_RUN_NUMBER
          echo "::set-output name=tag::$GITHUB_RUN_NUMBER"
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
      - name: Upload x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: x64/nanoos.fat32.gz
          asset_name: nanoos-x64-${{ steps.tag.outputs.tag }}.fat32.gz
          asset_content_type: application/tar+gzip
      - name: Upload arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: arm64/nanoos.fat32.gz
          asset_name: nanoos-arm64-${{ steps.tag.outputs.tag }}.fat32.gz
          asset_content_type: application/tar+gzip